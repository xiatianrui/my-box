import os
import sys
import customtkinter as ctk
import subprocess
import threading
import time
import ctypes
import tkinter.messagebox as tkmsg

# 设置 CustomTkinter 的外观模式和默认主题
ctk.set_appearance_mode("Dark")
ctk.set_default_color_theme("blue")

class DefenderDisabler(ctk.CTk):
    def __init__(self):
        super().__init__()
        
        self.title("Windows Defender Control")
        self.geometry("500x400")
        self.is_admin = self.check_admin()
        
        # 创建 UI 组件
        self.main_frame = ctk.CTkFrame(self)
        self.main_frame.pack(pady=20, padx=20, fill="both", expand=True)
        
        self.title_label = ctk.CTkLabel(self.main_frame, text="Defender Controller", font=("Arial", 24))
        self.title_label.pack(pady=10)
        
        self.status_label = ctk.CTkLabel(self.main_frame, text="Checking Status...")
        self.status_label.pack(pady=10)
        
        self.toggle_btn = ctk.CTkButton(self.main_frame, text="OFF", command=self.toggle_defender)
        self.toggle_btn.pack(pady=20)
        
        self.firewall_label = ctk.CTkLabel(self.main_frame, text="Firewall: Checking...")
        self.firewall_label.pack()
        
        # 启动状态检查线程
        threading.Thread(target=self.check_status, daemon=True).start()
        
    def check_admin(self):
        try:
            return os.getuid() == 0  # Linux/macOS
        except AttributeError:
            return ctypes.windll.shell32.IsUserAnAdmin() != 0  # Windows
    
    def check_status(self):
        while True:
            try:
                # 检查 Defender 状态
                defender_output = subprocess.run(
                    'powershell.exe Get-MpComputerStatus', 
                    capture_output=True
                ).stdout
                defender_status = defender_output.decode('cp1252')  # 使用 cp1252 编码
                
                is_defender_on = "AntivirusEnabled : True" in defender_status
                
                # 检查防火墙状态
                firewall_output = subprocess.run(
                    'netsh advfirewall show allprofiles', 
                    capture_output=True
                ).stdout
                firewall_status = firewall_output.decode('cp1252')  # 使用 cp1252 编码
                
                is_firewall_on = "ON" in firewall_status
                
                self.update_ui(is_defender_on, is_firewall_on)
            except Exception as e:
                print(f"Error in check_status: {e}")
            finally:
                time.sleep(2)
    
    def update_ui(self, defender_state, firewall_state):
        status_text = "Defender: ACTIVE" if defender_state else "Defender: INACTIVE"
        self.status_label.configure(text=status_text)
        self.toggle_btn.configure(text="TURN OFF" if defender_state else "TURN ON")
        self.firewall_label.configure(text=f"Firewall: {'ACTIVE' if firewall_state else 'INACTIVE'}")
    
    def toggle_defender(self):
        if not self.is_admin:
            tkmsg.showerror(title="Error", message="需要管理员权限！")
            return
            
        threading.Thread(target=self.run_admin_commands, daemon=True).start()
    
    def run_admin_commands(self):
        try:
            # 关闭 Defender
            subprocess.run([
                'powershell.exe', 
                'Set-MpPreference -DisableRealtimeMonitoring $true; Set-MpPreference -DisableBehaviorMonitoring $true'
            ], check=True)
            
            # 关闭防火墙
            subprocess.run(['netsh', 'advfirewall', 'set', 'allprofiles', 'state', 'off'], check=True)
        except Exception as e:
            tkmsg.showerror(title="Error", message=f"执行操作时发生错误：{e}")

if __name__ == "__main__":
    app = DefenderDisabler()
    app.mainloop()
